#include "main.h"
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/mman.h>
#include <string.h>
#include <sys/stat.h>

/**
 * my_copy - Copies the contents of a file to another file using
 * memory mapping.
 * @source_path: The path to the source file.
 * @destination_path: The path to the destination file.
 *
 * Return: 0 on success.
 * Description: If the source file cannot be opened - exit code 98.
 * If the destination file cannot be created or written to - exit
 * code 99.
 */
int my_copy(const char *source_path, const char *destination_path)
{
	int source_fd, dest_fd;
	struct stat source_stat;
	char *source_mapped, *dest_mapped;
	off_t file_size;

	source_fd = open(source_path, O_RDONLY);
	if (source_fd == -1)
	{
		dprintf(STDERR_FILENO, "Error: Can't open source file %s\n", source_path);
		exit(98);
	}

	if (fstat(source_fd, &source_stat) == -1)
	{
		dprintf(STDERR_FILENO, "Error: Can't get file size of source file %s\n",
		source_path);
		close(source_fd);
		exit(98);
	}
	file_size = source_stat.st_size;

	dest_fd = open(destination_path, O_CREAT | O_RDWR | O_TRUNC, 0664);
	if (dest_fd == -1)
	{
		dprintf(STDERR_FILENO, "Error: Can't create or write to destination file %s\n",
		destination_path);
		close(source_fd);
		exit(99);
	}

	if (ftruncate(dest_fd, file_size) == -1)
	{
		dprintf(STDERR_FILENO, "Error: Can't set file size for destination file %s\n",
		destination_path);
		close(source_fd);
		close(dest_fd);
		exit(99);
	}

	source_mapped = mmap(NULL, file_size, PROT_READ, MAP_SHARED, source_fd, 0);
	dest_mapped = mmap(NULL, file_size, PROT_WRITE, MAP_SHARED, dest_fd, 0);

	if (source_mapped == MAP_FAILED || dest_mapped == MAP_FAILED)
	{
		dprintf(STDERR_FILENO, "Error: Can't map source and destination files into memory\n");
		close(source_fd);
		close(dest_fd);
		exit(99);
	}

	 memcpy(dest_mapped, source_mapped, file_size);

	munmap(source_mapped, file_size);
	munmap(dest_mapped, file_size);
	close(source_fd);
	close(dest_fd);

	return 0;
}

int main(int argc, char *argv[])
{
	const char *source_path;
	const char *destination_path;

	if (argc != 3)
	{
		dprintf(STDERR_FILENO, "Usage: cp file_from file_to\n");
		exit(97);
	}

	source_path = argv[1];
	destination_path = argv[2];

	return my_copy(source_path, destination_path);
}


